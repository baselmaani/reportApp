// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int              @id @default(autoincrement())
  name           String
  email          String
  password       String
  tel            String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @default(now())
  reports        Report[]
  role           Role             @relation(fields: [roleId], references: [id])
  roleId         Int
  points         Point[]
  reportReaction reportReaction[]
  feedReaction   FeedReaction[]
  city           City?            @relation(fields: [cityId], references: [id])
  cityId         Int?
  comments       Comment[]
  events         Event[]
  eventsReviews  EventReview[]
  image          String?
}

model Role {
  id          Int      @id @default(autoincrement())
  name        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
  users       User[]
  description String?
}

model Category {
  id            Int            @id @default(autoincrement())
  name          String
  image         String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @default(now())
  reports       Report[]
  organizations Organization[]
  Staff         Staff?         @relation(fields: [staffId], references: [id])
  staffId       Int?
}

model Organization {
  id          Int        @id @default(autoincrement())
  name        String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @default(now())
  address     String?
  phone       String
  email       String
  website     String?
  description String?
  logo        String?
  categories  Category[]
  Feed        Feed[]
  Staff       Staff[]
  city        City?      @relation(fields: [cityId], references: [id])
  cityId      Int?
  events      Event[]
}

model Report {
  id              Int              @id @default(autoincrement())
  title           String?
  description     String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @default(now())
  categories      Category[]
  user            User             @relation(fields: [userId], references: [id])
  userId          Int
  longitude       Float?           @default(0)
  latitude        Float?           @default(0)
  images          String[]
  isPublic        Boolean          @default(false)
  isHandled       Boolean          @default(false)
  reportReactions reportReaction[]
  city            City?            @relation(fields: [cityId], references: [id])
  cityId          Int?
}

model Point {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  value      Float
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())
  sourceType String
}

model reportReaction {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  report    Report   @relation(fields: [reportId], references: [id])
  reportId  Int
  value     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Feed {
  id             Int            @id @default(autoincrement())
  title          String
  content        String
  organization   Organization   @relation(fields: [organizationId], references: [id])
  images         String[]
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @default(now())
  organizationId Int
  feedReactions  FeedReaction[]
  comments       Comment[]
}

model FeedReaction {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  feed      Feed     @relation(fields: [feedId], references: [id])
  feedId    Int
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Staff {
  id             Int          @id @default(autoincrement())
  name           String
  email          String
  password       String
  tel            String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @default(now())
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId Int
  categories     Category[]
}

model City {
  id           Int            @id @default(autoincrement())
  name         String
  Report       Report[]
  Organization Organization[]
  User         User[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  content   String
  feed      Feed     @relation(fields: [feedId], references: [id])
  feedId    Int
  images    String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Event {
  id                  Int                  @id @default(autoincrement())
  organization        Organization         @relation(fields: [organizationId], references: [id])
  organizationId      Int
  title               String
  content             String
  images              String[]
  availableSeats      Int
  startAt             DateTime?
  endAt               DateTime?
  registerFrom        DateTime?
  registerTo          DateTime?
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @default(now())
  address             String?
  latitude            Float?
  longitude           Float?
  participants        User[]
  reviews             EventReview[]
  participationFeilds ParticipationFeild[]
  isUnlimited         Boolean              @default(false)
}

model EventReview {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  event     Event    @relation(fields: [eventId], references: [id])
  eventId   Int
  value     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model ParticipationFeild {
  id        Int      @id @default(autoincrement())
  event     Event    @relation(fields: [eventId], references: [id])
  eventId   Int
  type      String
  value     String
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}
