{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport axiosInstance from \"./config/axiosInstance\";\nimport { urls } from \"./config/urls\";\nimport Cloudinary from \"./Cloudinary\";\n\nvar Comment = function () {\n  function Comment() {\n    _classCallCheck(this, Comment);\n  }\n\n  _createClass(Comment, null, [{\n    key: \"addComment\",\n    value: function addComment(data) {\n      var images, saveImagesPromises, savedImages, result;\n      return _regeneratorRuntime.async(function addComment$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              images = data.images.map(function (c) {\n                return \"data:image/png;base64,\" + c;\n              });\n              saveImagesPromises = images.map(function (c) {\n                return Cloudinary.uploadImage(c);\n              });\n              _context.next = 4;\n              return _regeneratorRuntime.awrap(Promise.all(saveImagesPromises));\n\n            case 4:\n              savedImages = _context.sent;\n              data.images = savedImages;\n              _context.next = 8;\n              return _regeneratorRuntime.awrap(axiosInstance('post', urls.comment.add, data).then(function (res) {\n                return res.data;\n              }));\n\n            case 8:\n              result = _context.sent;\n              return _context.abrupt(\"return\", result);\n\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }, {\n    key: \"getFeedComments\",\n    value: function getFeedComments(_ref) {\n      var feedId, limit, result;\n      return _regeneratorRuntime.async(function getFeedComments$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              feedId = _ref.feedId, limit = _ref.limit;\n              _context2.next = 3;\n              return _regeneratorRuntime.awrap(axiosInstance('get', urls.comment.getByFeed, {\n                feedId: feedId,\n                limit: limit\n              }).then(function (res) {\n                return res.data;\n              }));\n\n            case 3:\n              result = _context2.sent;\n              return _context2.abrupt(\"return\", result);\n\n            case 5:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }, {\n    key: \"removeComment\",\n    value: function removeComment(_ref2) {\n      var id, result;\n      return _regeneratorRuntime.async(function removeComment$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              id = _ref2.id;\n              _context3.next = 3;\n              return _regeneratorRuntime.awrap(axiosInstance('delete', urls.comment.delete, {\n                id: id\n              }).then(function (res) {\n                return res.data;\n              }));\n\n            case 3:\n              result = _context3.sent;\n              return _context3.abrupt(\"return\", result);\n\n            case 5:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }]);\n\n  return Comment;\n}();\n\nexport default Comment;","map":{"version":3,"sources":["C:/Users/Basel/Downloads/reportsApp-master/reportsApp-master/client/src/api/Comment.js"],"names":["axiosInstance","urls","Cloudinary","Comment","data","images","map","c","saveImagesPromises","uploadImage","Promise","all","savedImages","comment","add","then","res","result","feedId","limit","getByFeed","id","delete"],"mappings":";;;AAAA,OAAOA,aAAP;AACA,SAASC,IAAT;AACA,OAAOC,UAAP;;IAEMC,O;;;;;;;WACJ,oBAAwBC,IAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AACQC,cAAAA,MADR,GACiBD,IAAI,CAACC,MAAL,CAAYC,GAAZ,CAAgB,UAACC,CAAD;AAAA,kDAAgCA,CAAhC;AAAA,eAAhB,CADjB;AAEQC,cAAAA,kBAFR,GAE6BH,MAAM,CAACC,GAAP,CAAW,UAACC,CAAD;AAAA,uBAAOL,UAAU,CAACO,WAAX,CAAuBF,CAAvB,CAAP;AAAA,eAAX,CAF7B;AAAA;AAAA,+CAI4BG,OAAO,CAACC,GAAR,CAAYH,kBAAZ,CAJ5B;;AAAA;AAIQI,cAAAA,WAJR;AAKER,cAAAA,IAAI,CAACC,MAAL,GAAcO,WAAd;AALF;AAAA,+CAMuBZ,aAAa,CAAC,MAAD,EAASC,IAAI,CAACY,OAAL,CAAaC,GAAtB,EAA2BV,IAA3B,CAAb,CAA8CW,IAA9C,CACnB,UAACC,GAAD;AAAA,uBAASA,GAAG,CAACZ,IAAb;AAAA,eADmB,CANvB;;AAAA;AAMQa,cAAAA,MANR;AAAA,+CASSA,MATT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;WAYA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA+BC,cAAAA,MAA/B,QAA+BA,MAA/B,EAAuCC,KAAvC,QAAuCA,KAAvC;AAAA;AAAA,+CACuBnB,aAAa,CAAC,KAAD,EAAQC,IAAI,CAACY,OAAL,CAAaO,SAArB,EAAgC;AAChEF,gBAAAA,MAAM,EAANA,MADgE;AAEhEC,gBAAAA,KAAK,EAALA;AAFgE,eAAhC,CAAb,CAGlBJ,IAHkB,CAGb,UAACC,GAAD;AAAA,uBAASA,GAAG,CAACZ,IAAb;AAAA,eAHa,CADvB;;AAAA;AACQa,cAAAA,MADR;AAAA,gDAKSA,MALT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;WAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA6BI,cAAAA,EAA7B,SAA6BA,EAA7B;AAAA;AAAA,+CACuBrB,aAAa,CAAC,QAAD,EAAWC,IAAI,CAACY,OAAL,CAAaS,MAAxB,EAAgC;AAChED,gBAAAA,EAAE,EAAFA;AADgE,eAAhC,CAAb,CAElBN,IAFkB,CAEb,UAACC,GAAD;AAAA,uBAASA,GAAG,CAACZ,IAAb;AAAA,eAFa,CADvB;;AAAA;AACQa,cAAAA,MADR;AAAA,gDAISA,MAJT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;AAQF,eAAed,OAAf","sourcesContent":["import axiosInstance from './config/axiosInstance';\nimport { urls } from './config/urls';\nimport Cloudinary from './Cloudinary';\n\nclass Comment {\n  static async addComment(data) {\n    const images = data.images.map((c) => `data:image/png;base64,${c}`);\n    const saveImagesPromises = images.map((c) => Cloudinary.uploadImage(c));\n\n    const savedImages = await Promise.all(saveImagesPromises);\n    data.images = savedImages;\n    const result = await axiosInstance('post', urls.comment.add, data).then(\n      (res) => res.data\n    );\n    return result;\n  }\n\n  static async getFeedComments({ feedId, limit }) {\n    const result = await axiosInstance('get', urls.comment.getByFeed, {\n      feedId,\n      limit,\n    }).then((res) => res.data);\n    return result;\n  }\n\n  static async removeComment({ id }) {\n    const result = await axiosInstance('delete', urls.comment.delete, {\n      id,\n    }).then((res) => res.data);\n    return result;\n  }\n}\n\nexport default Comment;\n"]},"metadata":{},"sourceType":"module"}