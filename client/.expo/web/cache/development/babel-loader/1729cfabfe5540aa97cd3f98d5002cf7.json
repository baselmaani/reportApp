{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport axiosInstance from \"./config/axiosInstance\";\nimport { urls } from \"./config/urls\";\nimport axios from 'axios';\nimport Cloudinary from \"./Cloudinary\";\n\nvar Report = function () {\n  function Report() {\n    _classCallCheck(this, Report);\n  }\n\n  _createClass(Report, null, [{\n    key: \"getNearByReports\",\n    value: function getNearByReports(_ref) {\n      var lng, lat, result;\n      return _regeneratorRuntime.async(function getNearByReports$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              lng = _ref.lng, lat = _ref.lat;\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(axiosInstance('get', urls.report.nearby, {\n                lng: lng,\n                lat: lat\n              }).then(function (res) {\n                return res.data;\n              }));\n\n            case 3:\n              result = _context.sent;\n              return _context.abrupt(\"return\", result);\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }, {\n    key: \"saveReport\",\n    value: function saveReport(report) {\n      var images, saveImagesPromises, savedImages, result;\n      return _regeneratorRuntime.async(function saveReport$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              images = report.images.map(function (c) {\n                return \"data:image/png;base64,\" + c;\n              });\n              saveImagesPromises = images.map(function (c) {\n                return Cloudinary.uploadImage(c);\n              });\n              _context2.next = 4;\n              return _regeneratorRuntime.awrap(Promise.all(saveImagesPromises));\n\n            case 4:\n              savedImages = _context2.sent;\n              report.images = savedImages;\n              _context2.next = 8;\n              return _regeneratorRuntime.awrap(axiosInstance('post', urls.report.saveReport, _objectSpread({}, report)).then(function (res) {\n                return res.data;\n              }));\n\n            case 8:\n              result = _context2.sent;\n              return _context2.abrupt(\"return\", result);\n\n            case 10:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }, {\n    key: \"addReaction\",\n    value: function addReaction(data) {\n      var result;\n      return _regeneratorRuntime.async(function addReaction$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return _regeneratorRuntime.awrap(axiosInstance('post', urls.report.addReaction, data).then(function (res) {\n                return res.data;\n              }));\n\n            case 2:\n              result = _context3.sent;\n              return _context3.abrupt(\"return\", result);\n\n            case 4:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }, {\n    key: \"comment\",\n    value: function comment(_comment) {\n      var result;\n      return _regeneratorRuntime.async(function comment$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.next = 2;\n              return _regeneratorRuntime.awrap(axiosInstance('post', urls.report.addComment, {\n                comment: _comment\n              }).then(function (res) {\n                return res.data;\n              }));\n\n            case 2:\n              result = _context4.sent;\n              return _context4.abrupt(\"return\", result);\n\n            case 4:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }]);\n\n  return Report;\n}();\n\nexport default Report;","map":{"version":3,"sources":["C:/Users/Basel/Downloads/reportsApp-master/reportsApp-master/client/src/api/Report.js"],"names":["axiosInstance","urls","axios","Cloudinary","Report","lng","lat","report","nearby","then","res","data","result","images","map","c","saveImagesPromises","uploadImage","Promise","all","savedImages","saveReport","addReaction","comment","addComment"],"mappings":";;;;;;;;;AAAA,OAAOA,aAAP;AACA,SAASC,IAAT;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP;;IAEMC,M;;;;;;;WACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAgCC,cAAAA,GAAhC,QAAgCA,GAAhC,EAAqCC,GAArC,QAAqCA,GAArC;AAAA;AAAA,+CACuBN,aAAa,CAAC,KAAD,EAAQC,IAAI,CAACM,MAAL,CAAYC,MAApB,EAA4B;AAC5DH,gBAAAA,GAAG,EAAHA,GAD4D;AAE5DC,gBAAAA,GAAG,EAAHA;AAF4D,eAA5B,CAAb,CAGlBG,IAHkB,CAGb,UAACC,GAAD;AAAA,uBAASA,GAAG,CAACC,IAAb;AAAA,eAHa,CADvB;;AAAA;AACQC,cAAAA,MADR;AAAA,+CAKSA,MALT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;WAQA,oBAAwBL,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AACQM,cAAAA,MADR,GACiBN,MAAM,CAACM,MAAP,CAAcC,GAAd,CAAkB,UAACC,CAAD;AAAA,kDAAgCA,CAAhC;AAAA,eAAlB,CADjB;AAEQC,cAAAA,kBAFR,GAE6BH,MAAM,CAACC,GAAP,CAAW,UAACC,CAAD;AAAA,uBAAOZ,UAAU,CAACc,WAAX,CAAuBF,CAAvB,CAAP;AAAA,eAAX,CAF7B;AAAA;AAAA,+CAI4BG,OAAO,CAACC,GAAR,CAAYH,kBAAZ,CAJ5B;;AAAA;AAIQI,cAAAA,WAJR;AAKEb,cAAAA,MAAM,CAACM,MAAP,GAAgBO,WAAhB;AALF;AAAA,+CAMuBpB,aAAa,CAAC,MAAD,EAASC,IAAI,CAACM,MAAL,CAAYc,UAArB,oBAC7Bd,MAD6B,EAAb,CAElBE,IAFkB,CAEb,UAACC,GAAD;AAAA,uBAASA,GAAG,CAACC,IAAb;AAAA,eAFa,CANvB;;AAAA;AAMQC,cAAAA,MANR;AAAA,gDASSA,MATT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;WAYA,qBAAyBD,IAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CACuBX,aAAa,CAChC,MADgC,EAEhCC,IAAI,CAACM,MAAL,CAAYe,WAFoB,EAGhCX,IAHgC,CAAb,CAInBF,IAJmB,CAId,UAACC,GAAD;AAAA,uBAASA,GAAG,CAACC,IAAb;AAAA,eAJc,CADvB;;AAAA;AACQC,cAAAA,MADR;AAAA,gDAOSA,MAPT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;WAUA,iBAAqBW,QAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CACuBvB,aAAa,CAAC,MAAD,EAASC,IAAI,CAACM,MAAL,CAAYiB,UAArB,EAAiC;AACjED,gBAAAA,OAAO,EAAPA;AADiE,eAAjC,CAAb,CAElBd,IAFkB,CAEb,UAACC,GAAD;AAAA,uBAASA,GAAG,CAACC,IAAb;AAAA,eAFa,CADvB;;AAAA;AACQC,cAAAA,MADR;AAAA,gDAISA,MAJT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;AAOF,eAAeR,MAAf","sourcesContent":["import axiosInstance from './config/axiosInstance';\nimport { urls } from './config/urls';\nimport axios from 'axios';\nimport Cloudinary from './Cloudinary';\n\nclass Report {\n  static async getNearByReports({ lng, lat }) {\n    const result = await axiosInstance('get', urls.report.nearby, {\n      lng,\n      lat,\n    }).then((res) => res.data);\n    return result;\n  }\n\n  static async saveReport(report) {\n    const images = report.images.map((c) => `data:image/png;base64,${c}`);\n    const saveImagesPromises = images.map((c) => Cloudinary.uploadImage(c));\n\n    const savedImages = await Promise.all(saveImagesPromises);\n    report.images = savedImages;\n    const result = await axiosInstance('post', urls.report.saveReport, {\n      ...report,\n    }).then((res) => res.data);\n    return result;\n  }\n\n  static async addReaction(data) {\n    const result = await axiosInstance(\n      'post',\n      urls.report.addReaction,\n      data\n    ).then((res) => res.data);\n\n    return result;\n  }\n\n  static async comment(comment) {\n    const result = await axiosInstance('post', urls.report.addComment, {\n      comment,\n    }).then((res) => res.data);\n    return result;\n  }\n}\nexport default Report;\n"]},"metadata":{},"sourceType":"module"}