{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport React, { useState, useEffect } from 'react';\nimport { Card, IconButton } from 'react-native-paper';\nimport Slider from '@react-native-community/slider';\nimport { useAddReaction } from \"../../hooks/useAddReaction\";\nimport openMap from 'react-native-open-maps';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar ReportDetails = function ReportDetails(_ref) {\n  var report = _ref.report,\n      currentLocation = _ref.currentLocation;\n\n  var _useState = useState(0),\n      _useState2 = _slicedToArray(_useState, 2),\n      sliderValue = _useState2[0],\n      setSliderValue = _useState2[1];\n\n  var addReactionMutation = useAddReaction();\n\n  var onChangeSlider = function onChangeSlider(val) {\n    addReactionMutation.mutate({\n      value: val,\n      reportId: report.id\n    });\n    setSliderValue(val);\n  };\n\n  useEffect(function () {\n    if (report && report.reportReactions && report.reportReactions.length > 0) {\n      setSliderValue(report.reportReactions[0].value);\n    }\n  }, [report]);\n  return _jsxs(Card, {\n    style: styles.cardStyle,\n    children: [_jsx(View, {\n      style: styles.mapLink,\n      children: _jsx(IconButton, {\n        icon: 'google-maps',\n        color: \"#2196F3\",\n        size: 30,\n        onPress: function onPress() {\n          return openMap({\n            latitude: parseFloat(currentLocation == null ? void 0 : currentLocation.latitude),\n            longitude: parseFloat(currentLocation == null ? void 0 : currentLocation.longitude),\n            end: (report == null ? void 0 : report.latitude) + \",\" + (report == null ? void 0 : report.longitude),\n            navigate_mode: 'navigate',\n            provider: 'google'\n          });\n        }\n      })\n    }), _jsx(Text, {\n      style: styles.title,\n      children: report == null ? void 0 : report.title\n    }), _jsx(Text, {\n      style: styles.description,\n      children: report == null ? void 0 : report.description\n    }), _jsx(View, {\n      style: styles.imagesContainer,\n      children: _jsx(FlatList, {\n        data: report == null ? void 0 : report.images,\n        keyExtractor: function keyExtractor(_ref2) {\n          var item = _ref2.item;\n          return item;\n        },\n        horizontal: true,\n        showsHorizontalScrollIndicator: false,\n        renderItem: function renderItem(_ref3) {\n          var item = _ref3.item;\n          return _jsx(Image, {\n            source: {\n              uri: item\n            },\n            style: styles.imageItem\n          });\n        }\n      })\n    }), _jsx(View, {\n      children: _jsx(Slider, {\n        style: {\n          width: '100%',\n          height: 40\n        },\n        minimumValue: -1,\n        maximumValue: 1,\n        minimumTrackTintColor: \"#0f0\",\n        maximumTrackTintColor: \"#f00\",\n        value: sliderValue,\n        onSlidingComplete: onChangeSlider\n      })\n    })]\n  });\n};\n\nexport default ReportDetails;\nvar styles = StyleSheet.create({\n  imageItem: {\n    width: 300,\n    height: 200,\n    margin: 10\n  },\n  cardStyle: {\n    margin: 10,\n    padding: 20\n  },\n  title: {\n    fontSize: 20\n  },\n  description: {\n    color: '#3c3c3c70'\n  },\n  imagesContainer: {\n    marginTop: 20,\n    marginBottom: 20\n  },\n  mapLink: {\n    position: 'absolute',\n    top: -10,\n    right: -10,\n    zIndex: 99\n  }\n});","map":{"version":3,"sources":["C:/Users/Basel/Downloads/reportsApp-master/reportsApp-master/client/src/pages/home/ReportDetails.js"],"names":["React","useState","useEffect","Card","IconButton","Slider","useAddReaction","openMap","ReportDetails","report","currentLocation","sliderValue","setSliderValue","addReactionMutation","onChangeSlider","val","mutate","value","reportId","id","reportReactions","length","styles","cardStyle","mapLink","latitude","parseFloat","longitude","end","navigate_mode","provider","title","description","imagesContainer","images","item","uri","imageItem","width","height","StyleSheet","create","margin","padding","fontSize","color","marginTop","marginBottom","position","top","right","zIndex"],"mappings":"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","sourcesContent":["import { StyleSheet, Text, View, Image, FlatList } from 'react-native';\nimport React, { useState, useEffect } from 'react';\nimport { Card, IconButton } from 'react-native-paper';\nimport Slider from '@react-native-community/slider';\nimport { useAddReaction } from '../../hooks/useAddReaction';\nimport openMap from 'react-native-open-maps';\n\nconst ReportDetails = ({ report, currentLocation }) => {\n  const [sliderValue, setSliderValue] = useState(0);\n  const addReactionMutation = useAddReaction();\n\n  const onChangeSlider = (val) => {\n    addReactionMutation.mutate({\n      value: val,\n      reportId: report.id,\n    });\n    setSliderValue(val);\n  };\n\n  useEffect(() => {\n    if (report && report.reportReactions && report.reportReactions.length > 0) {\n      setSliderValue(report.reportReactions[0].value);\n    }\n  }, [report]);\n\n  return (\n    <Card style={styles.cardStyle}>\n      <View style={styles.mapLink}>\n        <IconButton\n          icon={'google-maps'}\n          color='#2196F3'\n          size={30}\n          onPress={() =>\n            openMap({\n              latitude: parseFloat(currentLocation?.latitude),\n              longitude: parseFloat(currentLocation?.longitude),\n              end: `${report?.latitude},${report?.longitude}`,\n              navigate_mode: 'navigate',\n              provider: 'google',\n            })\n          }\n        />\n      </View>\n      <Text style={styles.title}>{report?.title}</Text>\n      <Text style={styles.description}>{report?.description}</Text>\n      <View style={styles.imagesContainer}>\n        <FlatList\n          data={report?.images}\n          keyExtractor={({ item }) => item}\n          horizontal={true}\n          showsHorizontalScrollIndicator={false}\n          renderItem={({ item }) => (\n            <Image source={{ uri: item }} style={styles.imageItem} />\n          )}\n        />\n      </View>\n      <View>\n        <Slider\n          style={{ width: '100%', height: 40 }}\n          minimumValue={-1}\n          maximumValue={1}\n          minimumTrackTintColor='#0f0'\n          maximumTrackTintColor='#f00'\n          value={sliderValue}\n          onSlidingComplete={onChangeSlider}\n        />\n      </View>\n    </Card>\n  );\n};\n\nexport default ReportDetails;\n\nconst styles = StyleSheet.create({\n  imageItem: {\n    width: 300,\n    height: 200,\n    margin: 10,\n  },\n  cardStyle: {\n    margin: 10,\n    padding: 20,\n  },\n  title: {\n    fontSize: 20,\n  },\n  description: {\n    color: '#3c3c3c70',\n  },\n  imagesContainer: {\n    marginTop: 20,\n    marginBottom: 20,\n  },\n  mapLink: {\n    position: 'absolute',\n    top: -10,\n    right: -10,\n    zIndex: 99,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}