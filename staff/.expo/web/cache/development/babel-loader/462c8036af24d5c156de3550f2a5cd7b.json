{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { useState, useEffect } from 'react';\nimport * as Location from 'expo-location';\nexport var useCurrentLocation = function useCurrentLocation() {\n  var _useState = useState({}),\n      _useState2 = _slicedToArray(_useState, 2),\n      currentLocation = _useState2[0],\n      setCurrentLocation = _useState2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      initRegion = _useState4[0],\n      setInitRegion = _useState4[1];\n\n  var _useState5 = useState(''),\n      _useState6 = _slicedToArray(_useState5, 2),\n      error = _useState6[0],\n      setError = _useState6[1];\n\n  useEffect(function () {\n    (function _callee() {\n      var _await$Location$reque, status, location;\n\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(Location.requestForegroundPermissionsAsync());\n\n            case 2:\n              _await$Location$reque = _context.sent;\n              status = _await$Location$reque.status;\n\n              if (!(status !== 'granted')) {\n                _context.next = 7;\n                break;\n              }\n\n              setError('Permission to access location was denied');\n              return _context.abrupt(\"return\");\n\n            case 7:\n              _context.next = 9;\n              return _regeneratorRuntime.awrap(Location.getCurrentPositionAsync({\n                distanceInterval: 1000\n              }));\n\n            case 9:\n              location = _context.sent;\n              setCurrentLocation(location == null ? void 0 : location.coords);\n              setInitRegion(location);\n\n            case 12:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    })();\n  }, []);\n  return {\n    currentLocation: currentLocation,\n    initRegion: initRegion\n  };\n};","map":{"version":3,"sources":["/Users/almaani/Documents/GitHub/reportsApp/staff/src/hooks/useCurrentLocation.js"],"names":["useState","useEffect","Location","useCurrentLocation","currentLocation","setCurrentLocation","initRegion","setInitRegion","error","setError","requestForegroundPermissionsAsync","status","getCurrentPositionAsync","distanceInterval","location","coords"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAO,KAAKC,QAAZ,MAA0B,eAA1B;AAEA,OAAO,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,GAAM;AACtC,kBAA8CH,QAAQ,CAAC,EAAD,CAAtD;AAAA;AAAA,MAAOI,eAAP;AAAA,MAAwBC,kBAAxB;;AACA,mBAAoCL,QAAQ,CAAC,IAAD,CAA5C;AAAA;AAAA,MAAOM,UAAP;AAAA,MAAmBC,aAAnB;;AACA,mBAA0BP,QAAQ,CAAC,EAAD,CAAlC;AAAA;AAAA,MAAOQ,KAAP;AAAA,MAAcC,QAAd;;AACAR,EAAAA,SAAS,CAAC,YAAM;AACd,KAAC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CACwBC,QAAQ,CAACQ,iCAAT,EADxB;;AAAA;AAAA;AACOC,cAAAA,MADP,yBACOA,MADP;;AAAA,oBAEKA,MAAM,KAAK,SAFhB;AAAA;AAAA;AAAA;;AAGGF,cAAAA,QAAQ,CAAC,0CAAD,CAAR;AAHH;;AAAA;AAAA;AAAA,+CAOsBP,QAAQ,CAACU,uBAAT,CAAiC;AACpDC,gBAAAA,gBAAgB,EAAE;AADkC,eAAjC,CAPtB;;AAAA;AAOKC,cAAAA,QAPL;AAUCT,cAAAA,kBAAkB,CAACS,QAAD,oBAACA,QAAQ,CAAEC,MAAX,CAAlB;AACAR,cAAAA,aAAa,CAACO,QAAD,CAAb;;AAXD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAD;AAaD,GAdQ,EAcN,EAdM,CAAT;AAgBA,SAAO;AAAEV,IAAAA,eAAe,EAAfA,eAAF;AAAmBE,IAAAA,UAAU,EAAVA;AAAnB,GAAP;AACD,CArBM","sourcesContent":["import { useState, useEffect } from 'react';\nimport * as Location from 'expo-location';\n\nexport const useCurrentLocation = () => {\n  const [currentLocation, setCurrentLocation] = useState({});\n  const [initRegion, setInitRegion] = useState(null);\n  const [error, setError] = useState('');\n  useEffect(() => {\n    (async () => {\n      let { status } = await Location.requestForegroundPermissionsAsync();\n      if (status !== 'granted') {\n        setError('Permission to access location was denied');\n        return;\n      }\n\n      let location = await Location.getCurrentPositionAsync({\n        distanceInterval: 1000,\n      });\n      setCurrentLocation(location?.coords);\n      setInitRegion(location);\n    })();\n  }, []);\n\n  return { currentLocation, initRegion };\n};\n"]},"metadata":{},"sourceType":"module"}